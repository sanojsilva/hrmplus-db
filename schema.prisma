// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 Int         @id @default(autoincrement())
  email              String      @unique
  username           String?
  password           String      @db.VarChar(255)
  resetPasswordToken String?     @map("reset_password_token")
  active             Boolean     @default(false)
  roles              UserRoles[]
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")

  @@map("user")
}

model Permission {
  id        Int               @id @default(autoincrement())
  name      String            @db.VarChar(255)
  route     String            @db.VarChar(100)
  module    String            @db.VarChar(100)
  createdAt DateTime          @default(now()) @map("created_at")
  updatedAt DateTime          @updatedAt @map("updated_at")
  roles     RolePermissions[]

  @@map("permission")
}

model Role {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  users       UserRoles[]
  permissions RolePermissions[]

  @@map("role")
}

model RolePermissions {
  roleId       Int        @map("role_id")
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId Int        @map("permission_id")
  permission   Permission @relation(fields: [permissionId], references: [id])


  @@id([roleId, permissionId])
  @@map("role_permission")
}

model UserRoles {
  roleId Int  @map("role_id")
  role   Role @relation(fields: [roleId], references: [id])
  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@id([roleId, userId])
  @@map("user_role")
}

model Employee {
  id                           Int      @id @default(autoincrement())
  firstName                    String   @map("first_name")
  middleName                   String   @map("middle_name")
  lastName                     String   @map("last_name")
  dateOfBirth                  DateTime @map("date_of_birth")
  gender                       Gender
  salutation                   String
  joinedDate                   DateTime @map("joined_date")
  employeeCode                 String   @map("employee_code")
  qrCode                       String   @map("qr_code")
  emergencyPerson              String   @map("emergency_person")
  emergencyContact             String   @map("emergency_contact")
  emergencyContactRelationship String   @map("emergency_contact_relationship")
  image                        String   @db.VarChar(255)
  createdAt                    DateTime @default(now()) @map("created_at")
  updatedAt                    DateTime @updatedAt @map("updated_at")

  contactDetailId          Int
  contactDetails           EmpContactDetails       @relation(fields: [contactDetailId], references: [id])
  personalDetailId         Int
  personalDetails          EmpPersonalDetails      @relation(fields: [personalDetailId], references: [id])
  educationQualificationId Int
  eduQualifications        EducationQualifications @relation(fields: [educationQualificationId], references: [id])
  workHistoryId            Int
  workHistory              WorkHistory             @relation(fields: [workHistoryId], references: [id])
  gradeId                  Int
  Grade                    Grade                   @relation(fields: [gradeId], references: [id])
  healthInsuaranceId       Int
  healthInsuarance         HealthInsuarance        @relation(fields: [healthInsuaranceId], references: [id])
  designationId            Int
  designation              Designation             @relation(fields: [designationId], references: [id])
  salaryId                 Int
  salary                   Salary                  @relation(fields: [salaryId], references: [id])
  departmentId             Int
  department               Department              @relation(fields: [departmentId], references: [id])
  internalWorkHistoryId    Int
  internalWorkHistory      InternalWorkHistory     @relation(fields: [internalWorkHistoryId], references: [id])
  employmentTypeId         Int
  employmentType           EmploymentType          @relation(fields: [employmentTypeId], references: [id])

}

model EmpContactDetails {
  id                         Int        @id @default(autoincrement())
  mobileNo                   String     @map("mobile_no") @db.VarChar(255)
  personalEmail              String     @map("personal_email") @db.VarChar(255)
  companyEmail               String     @map("company_email") @db.VarChar(255)
  prefferedEmail             String     @map("preffered_email") @db.VarChar(255)
  currentAddr                String     @map("current_addr") @db.VarChar(255)
  currentAccommodationType   String     @map("current_accommodation_type") @db.VarChar(255)
  permenantAddr              String     @map("permenant_addr") @db.VarChar(255)
  permenantAccommodationType String     @map("permenant_accommodation_type") @db.VarChar(255)
  createdAt                  DateTime   @default(now()) @map("created_at")
  updatedAt                  DateTime   @updatedAt @map("updated_at")
  employee                   Employee[]

  @@map("emp_contact_details")
}

model EmpPersonalDetails {
  id            Int           @id @default(autoincrement())
  nic           String        @db.VarChar(255)
  maritalStatus MaritalStatus @map("marital_status")
  bloodGroup    String        @map("blood_group") @db.VarChar(255)
  familyDetails String        @map("family_details")
  healthDetails String        @map("health_details")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  employee      Employee[]

  @@map("emp_personal_details")
}

model EducationQualifications {
  id          Int        @id @default(autoincrement())
  SchoolOrUni String     @map("school_or_uni") @db.VarChar(255)
  level       String     @db.VarChar(255)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  employee    Employee[]

  @@map("education_qualifications")
}

model WorkHistory {
  id          Int        @id @default(autoincrement())
  comapny     String     @db.VarChar(255)
  designation String     @db.VarChar(255)
  salary      String     @db.VarChar(255)
  addr        String     @db.VarChar(255)
  contact     String     @db.VarChar(255)
  experience  String
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  employee    Employee[]

  @@map("work_history")
}

model Grade {
  id        Int        @id @default(autoincrement())
  name      String     @unique @db.VarChar(255)
  //pay?
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  employee  Employee[]
}

model HealthInsuarance {
  id         Int                      @id @default(autoincrement())
  number     String                   @unique @db.VarChar(255)
  createdAt  DateTime                 @default(now()) @map("created_at")
  updatedAt  DateTime                 @updatedAt @map("updated_at")
  providerId Int
  provider   HealthInsuaranceProvider @relation(fields: [providerId], references: [id])
  employee   Employee[]

  @@map("health_insuarance")
}

model HealthInsuaranceProvider {
  id               Int                @id @default(autoincrement())
  provider         String             @unique @db.VarChar(255)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  healthInsuarance HealthInsuarance[]

  @@map("health_insuarance_provider")
}

model Designation {
  id           Int                   @id @default(autoincrement())
  name         String                @unique @db.VarChar(255)
  description  String
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @updatedAt @map("updated_at")
  skills       SkillsOfDesignation[]
  employee     Employee[]
  internalWork InternalWorkHistory[]
}

model SkillsOfDesignation {
  id            Int         @id @default(autoincrement())
  skillId       Int         @map("skill_id")
  skill         Skills      @relation(fields: [skillId], references: [id])
  designationId Int         @map("designation_id")
  designation   Designation @relation(fields: [designationId], references: [id])


  @@map("skills_of_designation")
}

model Skills {
  id           Int                   @id @default(autoincrement())
  name         String                @unique @db.VarChar(255)
  description  String
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @updatedAt @map("updated_at")
  designations SkillsOfDesignation[]

}

model Salary {
  id          Int        @id @default(autoincrement())
  bankName    String     @map("bank_name") @db.VarChar(255)
  bankAccount String     @map("bank_account") @db.VarChar(255)
  mode        String     @db.VarChar(255)
  createdAt   DateTime   @default(now()) @map("created_at")
  updatedAt   DateTime   @updatedAt @map("updated_at")
  employee    Employee[]
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  employee  Employee[]
}

model EmploymentType {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  employee  Employee[]

  @@map("employment_type")
}

model InternalWorkHistory {
  id            Int         @id @default(autoincrement())
  fromDate      DateTime    @map("from_date")
  toDate        DateTime    @map("to_date")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  employee      Employee[]
  designationId Int
  designation   Designation @relation(fields: [designationId], references: [id])

  @@map("internal_work_history")
}

enum MaritalStatus {
  MARRIED
  SINGLE
  DIVORCED

  @@map("marital_status")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}
