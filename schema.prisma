// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions"]
}

model User {
  id                 Int         @id @default(autoincrement())
  email              String      @unique
  username           String?
  password           String      @db.VarChar(255)
  resetPasswordToken String?     @map("reset_password_token")
  active             Boolean     @default(false)
  roles              UserRoles[]
  createdAt          DateTime    @default(now()) @map("created_at")
  updatedAt          DateTime    @updatedAt @map("updated_at")
  employeeId         Int
  employee           Employee    @relation(fields: [employeeId], references: [id])

  @@map("user")
}

model Permission {
  id            Int               @id @default(autoincrement())
  name          String            @db.VarChar(255)
  frontendRoute String            @map("frontend_route") @db.VarChar(255)
  backendRoute  String            @map("backend_route") @db.VarChar(255)
  module        String            @db.VarChar(100)
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  roles         RolePermissions[]

  @@map("permission")
}

model Role {
  id          Int               @id @default(autoincrement())
  name        String            @unique
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  users       UserRoles[]
  permissions RolePermissions[]

  @@map("role")
}

model RolePermissions {
  roleId       Int        @map("role_id")
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId Int        @map("permission_id")
  permission   Permission @relation(fields: [permissionId], references: [id])


  @@id([roleId, permissionId])
  @@map("role_permission")
}

model UserRoles {
  roleId Int  @map("role_id")
  role   Role @relation(fields: [roleId], references: [id])
  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id])

  @@id([roleId, userId])
  @@map("user_role")
}

model Employee {
  id                           Int      @id @default(autoincrement())
  firstName                    String   @map("first_name")
  middleName                   String?  @map("middle_name")
  lastName                     String   @map("last_name")
  dateOfBirth                  DateTime @map("date_of_birth")
  gender                       Gender
  salutation                   String
  joinedDate                   DateTime @map("joined_date")
  employeeCode                 String   @map("employee_code")
  qrCode                       String?  @map("qr_code")
  emergencyPerson              String   @map("emergency_person")
  emergencyContact             String   @map("emergency_contact")
  emergencyContactRelationship String   @map("emergency_contact_relationship")
  image                        String   @db.VarChar(255)
  createdAt                    DateTime @default(now()) @map("created_at")
  updatedAt                    DateTime @updatedAt @map("updated_at")

  contactDetails          EmpContactDetails?
  personalDetails         EmpPersonalDetails?
  eduQualifications       EducationQualifications?
  workHistory             WorkHistory?
  internalWorkHistory     InternalWorkHistory?
  salary                  Salary?
  gradeId                 Int?
  grade                   Grade?                     @relation(fields: [gradeId], references: [id])
  healthInsuaranceId      Int?
  healthInsuarance        HealthInsuarance?          @relation(fields: [healthInsuaranceId], references: [id])
  designationId           Int
  designation             Designation                @relation(fields: [designationId], references: [id])
  departmentId            Int
  department              Department                 @relation(fields: [departmentId], references: [id])
  employmentTypeId        Int?
  employmentType          EmploymentType?            @relation(fields: [employmentTypeId], references: [id])
  jobApplicantId          Int?
  JobApplicant            JobApplicant?              @relation(fields: [jobApplicantId], references: [id])
  onboarding              Onboarding?
  onboardingActivity      OnboardingActivity[]
  transfer                Transfer[]
  seperation              Seperation?
  seperationActivities    SeperationActivity[]
  notification            Notification[]
  skillMap                SkillMap[]
  ShiftRequest            ShiftRequest[]
  promotion               Promotion[]
  leaveApplications       LeaveApplication[]         @relation("employee")
  actingLeaveApplications LeaveApplication[]         @relation("actingEmployee")
  ShiftAssignment         ShiftAssignment[]
  Attendance              Attendance[]
  AttendanceRequest       AttendanceRequest[]
  leavePolicyAssignments  LeavePolicyAssignment[]
  leaveAlocations         LeaveAlocation[]
  EmployeeTrainingEvent   EmployeeTrainingEvent[]
  user                    User?
  EmployeeCheckIns        EmployeeCheckIn[]
  responsibilities        ResponsibilityAllocation[]

  @@map("employee")
}

model EmpContactDetails {
  id                         Int      @id @default(autoincrement())
  mobileNo                   String   @map("mobile_no") @db.VarChar(255)
  personalEmail              String   @map("personal_email") @db.VarChar(255)
  companyEmail               String   @map("company_email") @db.VarChar(255)
  prefferedEmail             String   @map("preffered_email") @db.VarChar(255)
  currentAddr                String   @map("current_addr") @db.VarChar(255)
  currentAccommodationType   String   @map("current_accommodation_type") @db.VarChar(255)
  permenantAddr              String   @map("permenant_addr") @db.VarChar(255)
  permenantAccommodationType String   @map("permenant_accommodation_type") @db.VarChar(255)
  createdAt                  DateTime @default(now()) @map("created_at")
  updatedAt                  DateTime @updatedAt @map("updated_at")
  employeeId                 Int
  employee                   Employee @relation(fields: [employeeId], references: [id])

  @@map("emp_contact_details")
}

model EmpPersonalDetails {
  id            Int           @id @default(autoincrement())
  nic           String        @db.VarChar(255)
  maritalStatus MaritalStatus @map("marital_status")
  bloodGroup    String        @map("blood_group") @db.VarChar(255)
  familyDetails String        @map("family_details")
  healthDetails String        @map("health_details")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt @map("updated_at")
  employeeId    Int
  employee      Employee      @relation(fields: [employeeId], references: [id])

  @@map("emp_personal_details")
}

model EducationQualifications {
  id          Int      @id @default(autoincrement())
  SchoolOrUni String   @map("school_or_uni") @db.VarChar(255)
  level       String   @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id])

  @@map("education_qualifications")
}

model WorkHistory {
  id          Int      @id @default(autoincrement())
  comapny     String   @db.VarChar(255)
  designation String   @db.VarChar(255)
  salary      String   @db.VarChar(255)
  addr        String   @db.VarChar(255)
  contact     String   @db.VarChar(255)
  experience  String
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id])

  @@map("work_history")
}

model Grade {
  id           Int           @id @default(autoincrement())
  name         String        @unique @db.VarChar(255)
  //pay?
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  employee     Employee[]
  designations Designation[]


  @@map("grade")
}

model HealthInsuarance {
  id         Int                      @id @default(autoincrement())
  number     String                   @unique @db.VarChar(255)
  createdAt  DateTime                 @default(now()) @map("created_at")
  updatedAt  DateTime                 @updatedAt @map("updated_at")
  providerId Int
  provider   HealthInsuaranceProvider @relation(fields: [providerId], references: [id])
  employee   Employee[]

  @@map("health_insuarance")
}

model HealthInsuaranceProvider {
  id               Int                @id @default(autoincrement())
  provider         String             @unique @db.VarChar(255)
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")
  healthInsuarance HealthInsuarance[]

  @@map("health_insuarance_provider")
}

model Designation {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique @db.VarChar(255)
  description         String
  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @updatedAt @map("updated_at")
  skills              SkillsOfDesignation[]
  employee            Employee[]
  internalWork        InternalWorkHistory[]
  staffingPlanDetails StaffingPlanDetail[]
  jobOffers           JobOffer[]
  promotionCurrent    PromotionDetails[]    @relation("promotionCurrent")
  promotionNew        PromotionDetails[]    @relation("promotionNew")
  responsibilities    Responsibilities[]
  gradeId             Int?                  @map("grade_id")
  grade               Grade?                @relation(fields: [gradeId], references: [id])

  @@map("designation")
}

model SkillsOfDesignation {
  id            Int            @id @default(autoincrement())
  skillId       Int            @map("skill_id")
  skill         Skills         @relation(fields: [skillId], references: [id])
  designationId Int            @map("designation_id")
  designation   Designation    @relation(fields: [designationId], references: [id])
  skillDetails  SkillDetails[]

  @@map("skills_of_designation")
}

model Skills {
  id           Int                   @id @default(autoincrement())
  name         String                @unique @db.VarChar(255)
  description  String
  createdAt    DateTime              @default(now()) @map("created_at")
  updatedAt    DateTime              @updatedAt @map("updated_at")
  designations SkillsOfDesignation[]

  @@map("skills")
}

model Salary {
  id          Int      @id @default(autoincrement())
  bankName    String   @map("bank_name") @db.VarChar(255)
  bankAccount String   @map("bank_account") @db.VarChar(255)
  mode        String   @db.VarChar(255)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id])

  @@map("salary")
}

model Department {
  id                Int                @id @default(autoincrement())
  name              String             @db.VarChar(255)
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  employees         Employee[]
  staffingPlans     StaffingPlan[]
  departmentCurrent TransferDetails[]  @relation("departmentCurrent")
  departmentNew     TransferDetails[]  @relation("departmentNew")
  responsibilities  Responsibilities[]
}

model EmploymentType {
  id        Int        @id @default(autoincrement())
  name      String     @db.VarChar(255)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  employees Employee[]

  @@map("employment_type")
}

model InternalWorkHistory {
  id            Int         @id @default(autoincrement())
  fromDate      DateTime    @map("from_date")
  toDate        DateTime    @map("to_date")
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  employeeId    Int
  employee      Employee    @relation(fields: [employeeId], references: [id])
  designationId Int
  designation   Designation @relation(fields: [designationId], references: [id])

  @@map("internal_work_history")
}

enum MaritalStatus {
  MARRIED
  SINGLE
  DIVORCED

  @@map("marital_status")
}

enum JobOfferStatus {
  NOT_SENT_YET       @map("not_sent_yet")
  AWAITING_RESPONSE  @map("awaiting_response")
  ACCEPTED           @map("accepted")
  REJECTED           @map("rejected")

  @@map("job_offer_status")
}

enum Gender {
  MALE    @map("male")
  FEMALE  @map("female")
  OTHER   @map("other")

  @@map("gender")
}

model StaffingPlan {
  id                  Int                  @id @default(autoincrement())
  name                String               @db.VarChar(200)
  fromDate            DateTime             @map("from_date")
  toDate              DateTime             @map("to_date")
  estimatedBudget     Decimal              @map("estimated_budget") @db.Decimal(18, 2)
  departmentId        Int                  @map("department_id")
  department          Department           @relation(fields: [departmentId], references: [id])
  createdAt           DateTime             @default(now()) @map("created_at")
  updatedAt           DateTime             @updatedAt @map("updated_at")
  staffingPlanDetails StaffingPlanDetail[]

  @@map("staffing_plan")
}

model StaffingPlanDetail {
  id              Int          @id @default(autoincrement())
  designationId   Int
  designation     Designation  @relation(fields: [designationId], references: [id])
  noOfPositions   Int          @map("no_of_positions")
  positionCost    Decimal      @map("position_cost") @db.Decimal(18, 2)
  estimatedCost   Decimal      @map("estimated_cost") @db.Decimal(18, 2)
  currentOpenings Int          @default(0) @map("current_openings")
  currentCount    Int          @default(0) @map("current_count")
  staffingPlanId  Int          @map("staffing_plan_id")
  staffingPlan    StaffingPlan @relation(fields: [staffingPlanId], references: [id])
  createdAt       DateTime     @default(now()) @map("created_at")
  updatedAt       DateTime     @updatedAt @map("updated_at")
  jobOpened       Boolean      @default(false)
  jobOpenings     JobOpening[]

  @@map("staffing_plan_detail")
}

model JobOpening {
  id          Int     @id @default(autoincrement())
  jobTitle    String  @map("job_title") @db.VarChar(100)
  status      String  @db.VarChar(100)
  description String
  salaryRange String  @map("salary_range") @db.VarChar(255)
  published   Boolean @default(false)

  staffingPlanDetailId Int
  staffingPlanDetail   StaffingPlanDetail @relation(fields: [staffingPlanDetailId], references: [id])

  jobApplicant JobApplicant[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("job_opening")
}

model JobApplicantSource {
  id      Int    @id @default(autoincrement())
  name    String @db.VarChar(100)
  details String @db.VarChar(255)

  jobApplicant JobApplicant[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("job_applicant_source")
}

enum JobApplicantStatus {
  OPEN      @map("open")
  REJECTED  @map("rejected")
  ACCEPTED  @map("accepted")
}

model JobApplicant {
  id                     Int                @id @default(autoincrement())
  applicantName          String             @map("applicant_name") @db.VarChar(100)
  email                  String             @db.VarChar(200)
  status                 JobApplicantStatus
  phoneNumber            String             @map("phone_number") @db.VarChar(12)
  dateOfBirth            DateTime           @map("date_of_birth")
  resume                 String             @db.VarChar(255)
  coverLetter            String             @map("cover_letter") @db.VarChar(255)
  gender                 Gender
  haveDegree             Boolean?           @default(false)
  degree                 String?            @db.VarChar(300)
  passedAl               Boolean?           @default(false)
  alResults              String?            @db.VarChar(250)
  passedOls              Boolean?           @default(false)
  workExperience         String?
  academicQualifications String?
  remarks                String?

  jobOpeningId         Int
  jobApplicantSourceId Int?
  jobOpening           JobOpening          @relation(fields: [jobOpeningId], references: [id])
  jobApplicantSource   JobApplicantSource? @relation(fields: [jobApplicantSourceId], references: [id])
  jobOffer             JobOffer?
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")
  appointmentLetter    AppointmentLetter?
  Employee             Employee?
  onboarding           Onboarding?



  @@map("job_applicant")
}

model JobOffer {
  id            Int             @id @default(autoincrement())
  status        JobOfferStatus
  offerDate     DateTime        @map("offer_date")
  description   String
  applicantId   Int
  applicant     JobApplicant    @relation(fields: [applicantId], references: [id])
  designationId Int
  designation   Designation     @relation(fields: [designationId], references: [id])
  offerTerms    JobOfferTerms[]
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")


  @@map("job_offer")
}

model OfferTerm {
  id          Int             @id @default(autoincrement())
  term        String          @db.VarChar(255)
  description String          @db.VarChar(500)
  jobOffers   JobOfferTerms[]
  customTerms CustomTerms[]

  @@map("offer_term")
}

model JobOfferTerms {
  id          Int       @id @default(autoincrement())
  value       String    @db.VarChar(255)
  offerTermId Int       @map("offer_term_id")
  offerterm   OfferTerm @relation(fields: [offerTermId], references: [id])
  jobOfferId  Int       @map("joboffer_id")
  jobOffer    JobOffer  @relation(fields: [jobOfferId], references: [id])


  @@map("offer_term_of_job_offer")
}

model AppointmentLetter {
  id              Int           @id @default(autoincrement())
  body            String
  jobApplicantId  Int
  appointmentDate DateTime?
  jobApplicant    JobApplicant  @relation(fields: [jobApplicantId], references: [id])
  terms           CustomTerms[]
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  letterSent      Boolean?      @default(false)

  @@map("appointment_letter")
}

model CustomTerms {
  id             Int               @id @default(autoincrement())
  termId         Int
  offerTerm      OfferTerm         @relation(fields: [termId], references: [id])
  newDescription String            @map("new_description") @db.VarChar(255)
  letterId       Int
  letter         AppointmentLetter @relation(fields: [letterId], references: [id])

  @@map("custom_terms")
}

model JobTerms {
  id   Int    @id @default(autoincrement())
  name String

  @@map("job_terms")
}

//lifecycle

model Onboarding {
  id                   Int                  @id @default(autoincrement())
  joinedDate           DateTime             @map("joined_date")
  assignedEmployee     String
  status               OnboardingStatus
  jobApplicantId       Int
  jobApplicant         JobApplicant?        @relation(fields: [jobApplicantId], references: [id])
  employeeId           Int?
  employee             Employee?            @relation(fields: [employeeId], references: [id])
  onboardingActivities OnboardingActivity[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")


  @@map("onboarding")
}

enum OnboardingStatus {
  PENDING    @map("pending")
  COMPLETED  @map("completed")
}

model OnboardingActivity {
  id                 Int              @id @default(autoincrement())
  activity           String
  onboardingId       Int
  onboarding         Onboarding       @relation(fields: [onboardingId], references: [id])
  assignedEmployeeId Int?
  assignedEmployee   Employee?        @relation(fields: [assignedEmployeeId], references: [id])
  activityStatus     OnboardingStatus @default(PENDING)

  @@map("onboarding_activity")
}

model OnboardingActivities {
  id       Int    @id @default(autoincrement())
  activity String
}

model Promotion {
  id               Int                @id @default(autoincrement())
  promotionDate    DateTime           @map("promotion_date")
  employeeId       Int
  employee         Employee           @relation(fields: [employeeId], references: [id])
  promotionDetails PromotionDetails[]
  createdAt        DateTime           @default(now()) @map("created_at")
  updatedAt        DateTime           @updatedAt @map("updated_at")

  @@map("promotion")
}

model PromotionDetails {
  id            Int         @id @default(autoincrement())
  area          String
  currentStatus Int         @map("current_status")
  currentId     Designation @relation(name: "promotionCurrent", fields: [currentStatus], references: [id])
  newStatus     Int         @map("new_status")
  newId         Designation @relation("promotionNew", fields: [newStatus], references: [id])
  promotionId   Int
  promotion     Promotion   @relation(fields: [promotionId], references: [id])

  @@map("promotion_details")
}

model Transfer {
  id              Int               @id @default(autoincrement())
  transferDate    DateTime          @map("transfer_date")
  employeeId      Int
  employee        Employee          @relation(fields: [employeeId], references: [id])
  transferDetails TransferDetails[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")

  @@map("transfer")
}

// Holiday List
model HolidayList {
  id                Int          @id @default(autoincrement())
  name              String       @db.VarChar(200)
  fromDate          DateTime     @map("from_date")
  toDate            DateTime     @map("to_date")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  isSaturdayHoliday Boolean      @default(false)
  isSundayHoliday   Boolean      @default(false)
  totalHolidays     Int          @default(0)
  holidays          Holiday[]
  leavePeriod       LeavePeriod?
  shiftType         ShiftType?
  company           Company?

  @@map("holiday_list")
}

model Holiday {
  id            Int         @id @default(autoincrement())
  date          DateTime    @map("date")
  description   String      @db.VarChar(200)
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  holidayListId Int
  holidayList   HolidayList @relation(fields: [holidayListId], references: [id])

  @@map("holiday")
}

model TransferDetails {
  id            Int        @id @default(autoincrement())
  area          String
  currentStatus Int        @map("current_status")
  currentId     Department @relation(name: "departmentCurrent", fields: [currentStatus], references: [id])
  newStatus     Int        @map("new_status")
  newId         Department @relation("departmentNew", fields: [newStatus], references: [id])

  transferId Int
  transfer   Transfer @relation(fields: [transferId], references: [id])

  @@map("transfer_details")
}

model Seperation {
  id                   Int                  @id @default(autoincrement())
  seperationDate       DateTime             @map("seperation_date")
  assignedEmployee     String               @map("assigned_employee")
  status               SeperationStatus
  employeeId           Int
  employee             Employee             @relation(fields: [employeeId], references: [id])
  seperationActivities SeperationActivity[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("seperation")
}

enum SeperationStatus {
  PENDING    @map("pending")
  COMPLETED  @map("completed")
}

model SeperationActivity {
  id                 Int              @id @default(autoincrement())
  activity           String
  seperationId       Int
  Seperation         Seperation       @relation(fields: [seperationId], references: [id])
  assignedEmployeeId Int?
  assignedEmployee   Employee?        @relation(fields: [assignedEmployeeId], references: [id])
  activtyStatus      SeperationStatus @default(PENDING)

  @@map("separation_activity")
}

model SeperationActivities {
  id       Int    @id @default(autoincrement())
  activity String
}

model Notification {
  id                 Int      @id @default(autoincrement())
  message            String
  link               String?
  read               Boolean
  recievedEmployeeId Int      @map("recieved_employee_id")
  recievedEmployee   Employee @relation(fields: [recievedEmployeeId], references: [id])
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")

  @@map("notification")
}

model SkillMap {
  id Int @id @default(autoincrement())


  employeeId      Int
  employee        Employee          @relation(fields: [employeeId], references: [id])
  skillDetails    SkillDetails[]
  trainingDetails TrainingDetails[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
}

model SkillDetails {
  id             Int                 @id @default(autoincrement())
  skillId        Int
  skill          SkillsOfDesignation @relation(fields: [skillId], references: [id])
  rating         Int
  skillMapId     Int
  skillDetails   SkillMap            @relation(fields: [skillMapId], references: [id])
  evaluationDate DateTime            @default(now()) @map("evaluation_date")
}

model TrainingDetails {
  id                 Int           @id @default(autoincrement())
  skillMapId         Int
  skillDetails       SkillMap      @relation(fields: [skillMapId], references: [id])
  trainingEventId    Int
  trainngEvent       TrainingEvent @relation(fields: [trainingEventId], references: [id])
  trainingFeedbackId Int?
}

model TrainingEvent {
  id               Int      @id @default(autoincrement())
  eventName        String   @db.VarChar(100)
  eventStatus      String   @db.VarChar(100)
  startTime        DateTime @map("start_time")
  endTime          DateTime @map("end_time")
  trainerName      String   @db.VarChar(100)
  trainerEmail     String   @db.VarChar(100)
  trainerContactNo Int
  location         String   @db.VarChar(100)
  level            String   @db.VarChar(100)
  type             String   @db.VarChar(100)
  introduction     String   @db.VarChar(200)
  hasCertificate   Boolean  @default(false)

  trainingDetails       TrainingDetails[]
  EmployeeTrainingEvent EmployeeTrainingEvent[]

  @@map("training_event")
}

model EmployeeTrainingEvent {
  // id               Int     @id @default(autoincrement())
  status           String  @default("Scheduled") @db.VarChar(10)
  attendance       Boolean @default(false)
  isMandatory      Boolean @default(false)
  employeeFeedback String  @default("Pendding") @db.VarChar(200)
  employeerating   Int     @default(0)
  trainerComment   String  @default("Pendding") @db.VarChar(200)
  trainerGrade     String  @default("Q") @db.VarChar(1)

  employeeId Int      @map("employee_id")
  employee   Employee @relation(fields: [employeeId], references: [id])

  trainingEventId Int           @map("training_event_id")
  trainingEvent   TrainingEvent @relation(fields: [trainingEventId], references: [id])

  @@id([employeeId, trainingEventId])
  @@map("employee_training_event")
}

model LeavePeriod {
  id            Int          @id @default(autoincrement())
  fromDate      DateTime     @map("from_date")
  toDate        DateTime     @map("to_date")
  createdAt     DateTime     @default(now()) @map("created_at")
  updatedAt     DateTime     @updatedAt @map("updated_at")
  holidayListId Int?
  holidayList   HolidayList? @relation(fields: [holidayListId], references: [id])

  LeavePolicyAssignments LeavePolicyAssignment[]

  @@map("leave_period")
}

model LeaveType {
  id                       Int             @id @default(autoincrement())
  typeName                 String          @db.VarChar(100)
  maxContinuousDays        Int             @default(0)
  maxLeaves                Int             @default(0)
  applicableAfter          Int             @default(0)
  allowEncashment          Boolean         @default(false)
  encashmentThreshholdDays Int             @default(0)
  canCarryForward          Boolean         @default(false)
  maxCarryForward          Int             @default(0)
  withoutPay               Boolean         @default(false)
  includeHoliday           Boolean         @default(false)
  isCompensatory           Boolean         @default(false)
  isEarnedLeave            Boolean         @default(false)
  earnedLeaveFreq          EarnedLeaveFreq
  createdAt                DateTime        @default(now()) @map("created_at")
  updatedAt                DateTime        @updatedAt @map("updated_at")

  leavePolicyDetails LeavePolicyDetail[]
  leaveApplications  LeaveApplication[]
  leaveAlocations    LeaveAlocation[]

  @@map("leave_type")
}

enum EarnedLeaveFreq {
  MONTHLY  @map("monthly")
  YEARLY   @map("yearly")

  @@map("earned_leave_frequency")
}

model LeavePolicy {
  id                     Int                     @id @default(autoincrement())
  code                   String                  @db.VarChar(100)
  createdAt              DateTime                @default(now()) @map("created_at")
  updatedAt              DateTime                @updatedAt @map("updated_at")
  leavePolicyDetails     LeavePolicyDetail[]
  LeavePolicyAssignments LeavePolicyAssignment[]

  @@map("leave_policy")
}

model LeavePolicyDetail {
  id              Int         @id @default(autoincrement())
  annualAlocation Int
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  leaveTypeId     Int
  leaveType       LeaveType   @relation(fields: [leaveTypeId], references: [id])
  leavePolicyId   Int
  leavePolicy     LeavePolicy @relation(fields: [leavePolicyId], references: [id])


  @@map("leave_policy_detail")
}

model ShiftType {
  id              Int               @id @default(autoincrement())
  shiftName       String            @db.VarChar(100)
  startTime       String            @db.VarChar(5)
  endTime         String            @db.VarChar(5)
  isActive        Boolean           @default(true)
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime          @updatedAt @map("updated_at")
  holidayListId   Int
  holidayList     HolidayList       @relation(fields: [holidayListId], references: [id])
  shiftRequest    ShiftRequest[]
  shiftAssignment ShiftAssignment[]

  @@map("shift_type")
}

model ShiftRequest {
  id Int @id @default(autoincrement())

  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  approver  String   @db.VarChar(100)
  status    Boolean  @default(false)

  shiftTypeId Int
  shiftType   ShiftType @relation(fields: [shiftTypeId], references: [id])

  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("shift_request")
}

model ShiftAssignment {
  id        Int      @id @default(autoincrement())
  approver  String   @db.VarChar(100)
  startDate DateTime @map("start_date")
  endDate   DateTime @map("end_date")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  shiftTypeId Int
  shiftType   ShiftType @relation(fields: [shiftTypeId], references: [id])

  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("shift_assignment")
}

model LeaveApplication {
  id             Int      @id @default(autoincrement())
  fromDate       DateTime @map("from_date")
  toDate         DateTime @map("to_date")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  reason         String   @db.VarChar(255)
  totalLeaveDays Decimal  @map("total_leave_days") @db.Decimal(18, 2)
  status         String   @db.VarChar(40)

  leaveTypeId      Int
  leaveType        LeaveType @relation(fields: [leaveTypeId], references: [id])
  employeeId       Int?
  employee         Employee? @relation("employee", fields: [employeeId], references: [id])
  actingEmployeeId Int?
  actingEmployee   Employee? @relation("actingEmployee", fields: [actingEmployeeId], references: [id])

  leaveApplicationDetails LeaveApplicationDetail[]

  @@map("leave_application")
}

model LeaveApplicationDetail {
  id                 Int              @id @default(autoincrement())
  halfOrFull         String           @db.VarChar(10)
  leaveDate          DateTime         @map("leave_date")
  leaveApplicationId Int
  leaveApplication   LeaveApplication @relation(fields: [leaveApplicationId], references: [id])

  @@map("leave_application_detail")
}

model Company {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  name           String   @db.VarChar(255)
  logoImage      String   @db.VarChar(255)
  address        String   @db.VarChar(255)
  contactNumbers String   @db.VarChar(255)
  emails         String   @db.VarChar(255)

  holidayListId Int
  holidayList   HolidayList @relation(fields: [holidayListId], references: [id])

  @@map("company")
}

model Attendance {
  id           Int      @id @default(autoincrement())
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  date         DateTime
  inTime       DateTime @map("in_time")
  outTime      DateTime @map("out_time")
  workingHours Decimal  @map("working_hours")
  lateEntry    Boolean  @default(false)
  earlyExit    Boolean  @default(false)
  status       String   @db.VarChar(255)


  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("attendance")
}

model AttendanceRequest {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  toDate      DateTime @map("to_date")
  fromDate    DateTime @map("from_date")
  reason      String   @db.VarChar(255)
  explanation String   @db.VarChar(255)

  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])

  AttendanceRequsetDetails AttendanceRequestDetails[]

  @@map("attendance_request")
}

model AttendanceRequestDetails {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  date       DateTime
  halfOrFull String   @db.VarChar(10)


  attendanceRequestId Int
  AttendanceRequest   AttendanceRequest @relation(fields: [attendanceRequestId], references: [id])

  @@map("attendance_request_details")
}

model LeavePolicyAssignment {
  id        Int      @id @default(autoincrement())
  code      String   @db.VarChar(100)
  addUnused Boolean  @default(false) @map("add_unused")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  employeeId    Int         @map("employee_id")
  employee      Employee    @relation(fields: [employeeId], references: [id])
  leavePolicyId Int         @map("leave_policy_id")
  leavePolicy   LeavePolicy @relation(fields: [leavePolicyId], references: [id])
  leavePeriodId Int         @map("leave_period_id")
  leavePeriod   LeavePeriod @relation(fields: [leavePeriodId], references: [id])

  leaveAlocations LeaveAlocation[]

  @@map("leave_policy_assignment")
}

model LeaveAlocation {
  id                  Int      @id @default(autoincrement())
  code                String   @db.VarChar(100)
  addUnused           Boolean  @default(false) @map("add_unused")
  fromDate            DateTime @map("from_date")
  toDate              DateTime @map("to_date")
  newLeavesAlocated   Decimal  @default(0) @map("new_leaves_alocated") @db.Decimal(18, 2)
  totalLeavesAlocated Decimal  @default(0) @map("total_leaves_alocated") @db.Decimal(18, 2)
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  employeeId              Int                    @map("employee_id")
  employee                Employee               @relation(fields: [employeeId], references: [id])
  leaveTypeId             Int                    @map("leave_type_id")
  leaveType               LeaveType              @relation(fields: [leaveTypeId], references: [id])
  leavePolicyAssignmentId Int?                   @map("leave_policy_assignment_id")
  leavePolicyAssignment   LeavePolicyAssignment? @relation(fields: [leavePolicyAssignmentId], references: [id])

  @@map("leave_alocation")
}

model EmployeeCheckIn {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  time      DateTime
  inOut     String   @db.VarChar(255)

  employeeId Int
  employee   Employee @relation(fields: [employeeId], references: [id])

  @@map("employee_check_in")
}

//performance

model Responsibilities {
  id            Int                          @id @default(autoincrement())
  name          String
  departmentId  Int
  department    Department                   @relation(fields: [departmentId], references: [id])
  designationId Int
  designation   Designation                  @relation(fields: [designationId], references: [id])
  createdAt     DateTime                     @default(now()) @map("created_at")
  updatedAt     DateTime                     @updatedAt @map("updated_at")
  allocations   ResponsibilityAllocation[]
  template      ResponsibilitiesOfTemplate[]

  @@map("responsibilities")
}

model ResponsibilityAllocation {
  id                 Int                  @id @default(autoincrement())
  responsibilityId   Int
  responsibilities   Responsibilities     @relation(fields: [responsibilityId], references: [id])
  weightage          Int
  score              Int
  comments           String?
  status             ResponsibilityStatus
  expected           Int?
  completed          Int?
  deadline           DateTime
  dateCompleted      DateTime?            @default(now())
  assignedEmployeeId Int?
  assignedEmployee   Employee?            @relation(fields: [assignedEmployeeId], references: [id])
  createdAt          DateTime             @default(now()) @map("created_at")
  updatedAt          DateTime             @updatedAt @map("updated_at")

  @@map("responsibility_allocation")
}

enum ResponsibilityStatus {
  PENDING    @map("pending")
  COMPLETED  @map("completed")
}

model ResponsibilityTemplate {
  id               Int                          @id @default(autoincrement())
  name             String
  designationId    Int?
  responsibilities ResponsibilitiesOfTemplate[]
  createdAt        DateTime                     @default(now()) @map("created_at")
  updatedAt        DateTime                     @updatedAt @map("updated_at")
}

model ResponsibilitiesOfTemplate {
  id               Int                    @id @default(autoincrement())
  templateId       Int
  template         ResponsibilityTemplate @relation(fields: [templateId], references: [id])
  responsibilityId Int
  responsibility   Responsibilities       @relation(fields: [responsibilityId], references: [id])
  expected         Int?
  weightage        Int
  deadline         DateTime               @default(now())
  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @updatedAt @map("updated_at")
}
